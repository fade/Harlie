HARLIE

Operator's Manual

0. Acceptance testing

When you've just upgraded to a newer version of the Lisp toolchain and
you want to validate the bot's behaviour, you can run this acceptance
test procedure.  It should only take a minute or two, and it puts the
bot through its paces, validating that each significant subsystem is
working to at least some minimal degree.

It's certainly possible for some plugins to be broken or for some
subtle bug to have crept into some part of the bot, and for the
acceptance test procedure to pass anyway.  This is just intended as a
quick once-over to check that the bot is fit for service after bumping
the toolchain or otherwise restarting.

 - In channel, use the command "!help".
   This demonstrates that the bot is capable of receiving and sending
   messages through the IRC client library, and that it can work out a
   Web port to display, which shows that its "context" subsystem is
   working.

 - In a web browser, pull up the help URL the bot has given you.
   This shows that the Web server subsystem is working, and further
   verifies that the context subsystem is sane.

 - Edit the URL in your Web browser to change /help to /source.
   Further exercises the Web server subsystem.

 - In the Web browser, click on one of the source files.
   More Web server validation.  Also shows whether the Lisp
   prettyprint library is working.

 - In your Web browser, delete the portion of the URL after the port
   number.
   This will bring up the list of shortened URLs in the current
   context.  The database client library must be used to pull these
   up; if it works, the database is readable.

 - Click on one of the titles and verify that it pulls up the original
   target.
   Exercises a different code path through the Web server; also
   further verifies that the database read code for the URL shortener
   is working.

 - In IRC, use the "!metar" command.
   The Web client code is exercised by this command.  Sometimes a
   particular airport's weather data has not been updated, so spurious
   errors can be seen here.

 - In IRC, issue the "!status full" command.
   This reads the database for the Markov chainer, again exercising
   the context code.

 - In IRC, issue the "!babble" and/or "!haiku" commands.
   Demonstrates that the chainer can read from its database and
   perform its most complex function, chaining an output together.

 - In IRC, type something for the bot to see.  Then issue either
   "!status" or "!status full" again.  Verify that the "I know n
   phrases" response has been bumped up.
   This shows that the chainer database can be written as well as
   read.

1. Initializing the database

You'll need to install PostgreSQL and create a database instance for the bot.

  $ createdb botdb

The file schema.sql contains the bare minimum database schema for the bot.
You'll need to pipe it to psql, but you'll also need to specify ownership for
tables and so forth.

  $ sed 's/#laughingboy#/BOT-OWNER/g' < schema.sql | psql botdb

where BOT-OWNER should be the name of the PostgreSQL user who 'owns' the bot db.
(Usually also the Linux username which starts the bot processes.)

2. Adding a new channel

The bot gets its information on how to start up instances from two
places: from the config.lisp source file, and also from the database.

First, edit config.lisp to add a new instance there.  There should be
one defparameter form calling make-config to define all the bot
instances.  Each new nick should be added as a form within
irc-nickchannels, and a new web-server-port should be added to
web-server-ports.

But this doesn't tell the bot which web server port should be
associated with which nickname, and it also doesn't create a context.
Contexts are stored in the database's contexts table:

botdb=# select * from contexts;
 context_id | context_name | irc_server  | irc_channel |     web_server     | web_port | web_uri_prefix 
------------+--------------+-------------+-------------+--------------------+----------+----------------
          3 | shogun       | irc.srh.org | #walled     | 127.0.0.1          |     9099 | /
          4 | thugster     | irc.srh.org | #wallednoc  | 127.0.0.1          |     7080 | /
          2 | SR-4         | irc.srh.org | #fanoogle   | localhost          |     5801 | /
          6 | Shrtmegister | irc.srh.org | #blowme     | blowme.deepsky.com |     6969 | /
          1 | harlot       | irc.srh.org | #trinity    | 10.0.1.3           |     5791 | /
(5 rows)

When adding a new nickname, you'll also need to add an entry to this
table.

Access the database ("psql botdb") and enter a command of the
following form:

botdb=# INSERT INTO contexts (context_name, irc_server, irc_channel,
web_server, web_port, web_uri_prefix) VALUES ('newbotnick',
'irc.srh.org', '#channelname', 'coruscant.deepsky.com', 8188, '/');

NOTA BENE: The web_port value is an *integer*, not a string.  All the
other values are strings.

Once you've edited config.lisp and added the row to the contexts
table, you should restart the bot.  There is as yet no good way to add
a bot instance on the fly.
